Question: Identify a table in the Sakila database that violates 1NF. Explain how you would normalize it to achieve 1NF.
Explanation:
A table is in 1NF if it contains only atomic (indivisible) values; no repeating groups or arrays are allowed.
Example: Check for any table with columns that contain multiple values in a single cell, such as a list of actors in a single column.
Normalization: Split the multi-valued attributes into separate rows, creating a new table if necessary.


Question: Choose a table in Sakila and describe how you would determine whether it is in 2NF. If it violates 2NF, explain the steps to normalize it.
Explanation:
A table is in 2NF if it is in 1NF and all non-key attributes are fully functionally dependent on the primary key.
Example: Look for tables where non-primary key columns are dependent on a part of a composite primary key.
Normalization: Move the partially dependent columns to a new table that uses the part of the composite key they depend on as a primary key.


Question: Identify a table in Sakila that violates 3NF. Describe the transitive dependencies present and outline the steps to normalize the table to 3NF.
Explanation:
A table is in 3NF if it is in 2NF and all its attributes are not only dependent on the primary key but are also non-transitively dependent.
Example: Identify any table where a non-key column depends on another non-key column.
Normalization: Move the dependent columns to a new table where the column they depend on becomes a key.


Question: Take a specific table in Sakila and guide through the process of normalizing it from the initial unnormalized form up to at least 2NF.
Explanation:
Start with the raw table (possibly with repeating groups or multi-valued attributes).
Break it down to 1NF by removing repeating groups.
Achieve 2NF by eliminating partial dependencies.


Question: Write a query using a CTE to retrieve the distinct list of actor names and the number of films they have acted in.
Explanation:
Query Example:
WITH ActorFilmCount AS (
    SELECT a.actor_id, a.first_name, a.last_name, COUNT(f.film_id) AS film_count
    FROM actor a
    JOIN film_actor fa ON a.actor_id = fa.actor_id
    JOIN film f ON fa.film_id = f.film_id
    GROUP BY a.actor_id, a.first_name, a.last_name
)
SELECT first_name, last_name, film_count FROM ActorFilmCount;


Question: Use a recursive CTE to generate a hierarchical list of categories and their subcategories.
Explanation:
Recursive CTEs allow you to traverse hierarchical data, such as categories and subcategories.
Query Example:
WITH RECURSIVE CategoryHierarchy AS (
    SELECT category_id, name, parent_id
    FROM category
    WHERE parent_id IS NULL
    UNION ALL
    SELECT c.category_id, c.name, c.parent_id
    FROM category c
    JOIN CategoryHierarchy ch ON c.parent_id = ch.category_id
)
SELECT * FROM CategoryHierarchy;



Question: Create a CTE that combines information from the film and language tables to display the film title, language name, and rental rate.
Explanation:
Query Example:
WITH FilmLanguage AS (
    SELECT f.title, l.name AS language_name, f.rental_rate
    FROM film f
    JOIN language l ON f.language_id = l.language_id
)
SELECT * FROM FilmLanguage;



Question: Write a query using a CTE to find the total revenue generated by each customer (sum of payments).
Explanation:
Query Example:
WITH CustomerRevenue AS (
    SELECT customer_id, SUM(amount) AS total_revenue
    FROM payment
    GROUP BY customer_id
)
SELECT * FROM CustomerRevenue;



Question: Utilize a CTE with a window function to rank films based on their rental duration.
Explanation:
Query Example:
WITH FilmRanking AS (
    SELECT title, rental_duration, RANK() OVER (ORDER BY rental_duration DESC) AS rank
    FROM film
)
SELECT * FROM FilmRanking;


Question: Create a CTE to list customers who have made more than two rentals, and then join this CTE with the customer table to retrieve additional customer details.
Explanation:
Query Example
WITH FrequentRenters AS (
    SELECT customer_id, COUNT(rental_id) AS rental_count
    FROM rental
    GROUP BY customer_id
    HAVING COUNT(rental_id) > 2
)
SELECT c.*, fr.rental_count
FROM customer c
JOIN FrequentRenters fr ON c.customer_id = fr.customer_id;



Question: Write a query using a CTE to find the total number of rentals made each month.
Explanation:
Query Example:
WITH MonthlyRentals AS (
    SELECT DATE_TRUNC('month', rental_date) AS month, COUNT(*) AS rental_count
    FROM rental
    GROUP BY DATE_TRUNC('month', rental_date)
)
SELECT * FROM MonthlyRentals;



Question: Use a CTE to pivot the data from the payment table to display the total payments made by each customer in separate columns for different payment methods.
Explanation:
Query Example:
WITH PaymentPivot AS (
    SELECT customer_id,
           SUM(CASE WHEN payment_method = 'Credit Card' THEN amount ELSE 0 END) AS credit_card,
           SUM(CASE WHEN payment_method = 'Cash' THEN amount ELSE 0 END) AS cash,
           SUM(CASE WHEN payment_method = 'Check' THEN amount ELSE 0 END) AS check
    FROM payment
    GROUP BY customer_id
)
SELECT * FROM PaymentPivot;



Question: Create a CTE to generate a report showing pairs of actors who have appeared in the same film together.
Explanation:
Query Example:
WITH ActorPairs AS (
    SELECT fa1.actor_id AS actor1_id, fa2.actor_id AS actor2_id, fa1.film_id
    FROM film_actor fa1
    JOIN film_actor fa2 ON fa1.film_id = fa2.film_id AND fa1.actor_id < fa2.actor_id
)
SELECT a1.first_name || ' ' || a1.last_name AS actor1, 
       a2.first_name || ' ' || a2.last_name AS actor2, 
       ap.film_id
FROM ActorPairs ap
JOIN actor a1 ON ap.actor1_id = a1.actor_id
JOIN actor a2 ON ap.actor2_id = a2.actor_id;



Question: Implement a recursive CTE to find all employees in the staff table who report to a specific manager.
Explanation:
Query Example:
WITH RECURSIVE EmployeeHierarchy AS (
    SELECT staff_id, first_name, last_name, manager_id
    FROM staff
    WHERE manager_id = [Manager_ID]
    UNION ALL
    SELECT s.staff_id, s.first_name, s.last_name, s.manager_id
    FROM staff s
    JOIN EmployeeHierarchy eh ON s.manager_id = eh.staff_id
)
SELECT * FROM EmployeeHierarchy;
